# –ü—É—Ç–∏ –¥–æ —Ñ–∞–∑
CLOUD_DIR=infra
SERVICES_DIR=services
CONFIG=config/terraform.tfvars.json
KUBECONFIG=$(SERVICES_DIR)/vera-infra-kubeconfig.yaml

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–∑ terraform output
CLUSTER_NAME=$(shell terraform -chdir=$(CLOUD_DIR) output -raw cluster_name)
FOLDER_ID=$(shell terraform -chdir=$(CLOUD_DIR) output -raw folder_id)

.PHONY: all cloud services clean kubeconfig

# -------------------------
# –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫
# -------------------------
all: cloud kubeconfig services

# -------------------------
# –§–∞–∑–∞ 1: –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
# -------------------------
cloud:
	@echo "üöÄ [CLOUD] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
	cd $(CLOUD_DIR) && terraform init
	cd $(CLOUD_DIR) && terraform apply -auto-approve -var-file=../$(CONFIG)

cloud-only:
	cd $(CLOUD_DIR) && terraform apply -auto-approve -var-file=../$(CONFIG)

# -------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è kubeconfig
# -------------------------
# kubeconfig:
# 	@echo "üì° [KUBECONFIG] –ü–æ–ª—É—á–∞–µ–º kubeconfig –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞..."
# 	@if [ ! -f $(KUBECONFIG) ]; then \
# 		echo "üìÑ kubeconfig –Ω–µ –Ω–∞–π–¥–µ–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º..."; \
# 		yc managed-kubernetes cluster get-credentials $$CLUSTER_NAME --external --folder-id $$FOLDER_ID --config $(KUBECONFIG); \
# 	else \
# 		echo "‚úÖ kubeconfig —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."; \
# 	fi


TFVARS_PATH := ./config/terraform.tfvars.json
TOKEN_FILE := ./secrets/yc-token.txt

CLOUD_ID := $(shell jq -r '.cloud_id' $(TFVARS_PATH))
FOLDER_NAME := $(shell jq -r '.folder_name' $(TFVARS_PATH))
CLUSTER_NAME := zonal-infra-cluster

kubeconfig:
	@echo "üì° [KUBECONFIG] –ü–æ–ª—É—á–∞–µ–º kubeconfig –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ $(CLUSTER_NAME)..."
	@echo "$(KUBECONFIG)"
	@if [ ! -f $(TOKEN_FILE) ]; then \
		echo "‚ùå –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: $(TOKEN_FILE)"; \
		echo "   –ü–æ–ª–æ–∂–∏ OAuth —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏."; \
		exit 1; \
	fi
	@if [ ! -f $(KUBECONFIG) ]; then \
		TOKEN=$$(cat $(TOKEN_FILE)); \
		CLOUD_ID=$(CLOUD_ID); \
		FOLDER_NAME=$(FOLDER_NAME); \
		FOLDER_ID=$$(yc --token=$$TOKEN --cloud-id=$$CLOUD_ID resource-manager folder list --format json | jq -r '.[] | select(.name=="'$$FOLDER_NAME'") | .id'); \
		if [ -z "$$FOLDER_ID" ]; then \
			echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FOLDER_ID –ø–æ –∏–º–µ–Ω–∏ $$FOLDER_NAME"; \
			exit 1; \
		fi; \
		echo "üìÑ kubeconfig –Ω–µ –Ω–∞–π–¥–µ–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º..."; \
		yc --token=$$TOKEN --cloud-id=$$CLOUD_ID --folder-id=$$FOLDER_ID managed-kubernetes cluster get-credentials $(CLUSTER_NAME) --external --force; \
		cp $$HOME/.kube/config $(KUBECONFIG); \
		echo "‚úÖ kubeconfig —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $(KUBECONFIG)"; \
	else \
		echo "‚úÖ kubeconfig —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."; \
	fi



# export KUBECONFIG=./vera-infra-kubeconfig.yaml




# -------------------------
# –§–∞–∑–∞ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GitLab –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
# -------------------------
services:
	@echo "üì¶ [SERVICES] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GitLab –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
	cd $(SERVICES_DIR) && terraform init
	cd $(SERVICES_DIR) && terraform apply -auto-approve -var-file=../$(CONFIG)

# -------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
# -------------------------
clean:
	@echo "üî• –£–¥–∞–ª—è–µ–º phase1_infra..."
	cd $(CLOUD_DIR) && terraform destroy -auto-approve -var-file=../$(CONFIG) || true
	@echo "üßπ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
	rm -f $(KUBECONFIG)

# @echo "üî• –£–¥–∞–ª—è–µ–º phase2_services..."
# cd $(SERVICES_DIR) && terraform destroy -auto-approve -var-file=../$(CONFIG) || true